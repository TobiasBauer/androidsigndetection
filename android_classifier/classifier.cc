#include "tensorflow/core/public/session.h"
#include "tensorflow/core/protobuf/meta_graph.pb.h"

#include <stdio.h>


using namespace std;
using namespace tensorflow;


// set up your input paths
const string pathToGraph = "/home/baba/tensorflow/models/my-model.meta";
const string checkpointPath = "/home/baba/tensorflow/models/my-model";

int main()
{	
	

	auto session = NewSession(SessionOptions());

	if (session == nullptr) {
	    printf("Could not create Tensorflow session.");
	}

	Status status;

	// Read in the protobuf graph we exported
	MetaGraphDef graph_def;
	status = ReadBinaryProto(Env::Default(), pathToGraph, &graph_def);
	if (!status.ok()) {
	    LOG(ERROR) << "Error reading graph definition " << status;

	}else{
		cout<< "Reading Graph:..............." << status.ToString() <<"\n";
	}
	// Add the graph to the session
	status = session->Create(graph_def.graph_def());
	if (!status.ok()) {
	    
	    LOG(ERROR) << "Error creating graph: " << status;
	}else{
		cout << "Creating Graph:............" << status.ToString() <<"\n";
	}
	// Read weights from the saved checkpoint
	Tensor checkpointPathTensor(DT_STRING, TensorShape());
	checkpointPathTensor.scalar<std::string>()() = checkpointPath;
	status = session->Run(
		{{ graph_def.saver_def().filename_tensor_name(), checkpointPathTensor },},
		{},
		{graph_def.saver_def().restore_op_name()},
		nullptr);
	if (!status.ok()) {
	    LOG(ERROR) << "Error loading checkpoint from  " << status;
	}else{
		cout << "Reading weights from checkpoint:.........." << status.ToString() <<"\n";
	}	
/*
	auto load_graph_status =
                ReadBinaryProto(tensorflow::Env::Default(), my_model, &graph_def);

        auto session_status = session->Create(graph_def);

        std::vector<tensorflow::Tensor> out;
        std::vector<string> vNames;

        int node_count = graph_def.node_size();
        for (int i = 0; i < node_count; i++) {
            auto n = graph_def.node(i);

            if (n.name().find("nWeights") != std::string::npos) {
                vNames.push_back(n.name());
            }
*/ 
	float image [400] = {-0.5,-0.5,-0.5,-0.5,-0.5,-0.496078431373,-0.460784313725,-0.472549019608,-0.492156862745,-0.492156862745,-0.480392156863,-0.5,-0.5,-0.5,-0.5,-0.5,-0.476470588235,-0.492156862745,-0.492156862745,-0.496078431373,-0.5,-0.5,0.449019607843,0.472549019608,-0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.48431372549,-0.5,-0.492156862745,0.5,-0.5,0.5,-0.5,-0.5,-0.5,0.48431372549,0.476470588235,0.5,0.5,0.496078431373,0.5,0.5,0.5,0.5,0.496078431373,0.5,0.5,0.48431372549,0.5,-0.488235294118,-0.480392156863,-0.5,-0.5,-0.5,-0.5,0.464705882353,0.488235294118,0.5,0.5,0.5,0.480392156863,0.5,0.5,0.5,0.5,0.48431372549,0.5,0.480392156863,0.480392156863,0.5,-0.5,0.5,-0.5,-0.5,0.476470588235,0.46862745098,0.46862745098,0.488235294118,0.492156862745,0.488235294118,0.480392156863,0.488235294118,0.476470588235,0.48431372549,0.492156862745,0.46862745098,0.460784313725,0.456862745098,0.452941176471,0.5,0.5,0.5,-0.5,-0.496078431373,0.460784313725,0.464705882353,0.492156862745,0.5,-0.496078431373,-0.5,0.492156862745,0.46862745098,0.5,0.492156862745,-0.5,-0.5,-0.5,-0.5,-0.5,0.5,0.5,-0.480392156863,-0.48431372549,-0.488235294118,0.5,0.492156862745,0.5,-0.5,-0.445098039216,-0.476470588235,0.5,0.5,0.5,0.5,-0.472549019608,-0.488235294118,0.496078431373,-0.5,-0.5,-0.456862745098,0.5,0.5,-0.476470588235,-0.472549019608,0.5,0.5,-0.5,-0.472549019608,-0.46862745098,0.5,0.5,0.5,0.5,-0.452941176471,-0.464705882353,0.5,0.5,0.5,-0.496078431373,-0.46862745098,0.5,0.5,-0.496078431373,-0.5,0.480392156863,0.476470588235,-0.5,-0.5,0.488235294118,0.480392156863,0.480392156863,0.464705882353,0.480392156863,-0.5,-0.5,0.472549019608,0.480392156863,0.488235294118,-0.5,-0.480392156863,0.5,0.5,-0.5,-0.5,0.5,-0.5,-0.5,-0.5,-0.5,-0.5,-0.5,0.46862745098,0.5,-0.5,-0.5,0.5,0.476470588235,0.480392156863,-0.48431372549,-0.472549019608,0.5,0.5,-0.5,-0.5,0.496078431373,-0.5,-0.492156862745,-0.5,0.5,-0.5,-0.492156862745,-0.488235294118,0.5,-0.48431372549,-0.492156862745,0.5,0.492156862745,0.5,-0.496078431373,-0.472549019608,0.5,0.5,-0.5,-0.5,0.5,-0.5,-0.492156862745,0.496078431373,0.496078431373,0.472549019608,-0.496078431373,-0.492156862745,0.5,-0.48431372549,-0.460784313725,0.5,0.496078431373,0.5,-0.48431372549,-0.456862745098,0.5,0.5,-0.5,-0.5,0.5,-0.488235294118,-0.5,0.492156862745,0.496078431373,0.5,-0.488235294118,-0.5,0.5,-0.480392156863,-0.5,0.5,0.464705882353,0.496078431373,-0.5,-0.460784313725,0.5,0.5,-0.5,-0.5,0.5,0.5,-0.492156862745,-0.5,-0.492156862745,-0.5,-0.488235294118,-0.5,0.492156862745,0.5,-0.5,-0.5,-0.5,-0.5,-0.496078431373,0.5,0.5,0.5,-0.5,-0.488235294118,0.5,0.492156862745,0.480392156863,-0.496078431373,-0.48431372549,-0.5,-0.488235294118,0.488235294118,0.5,0.5,0.492156862745,-0.5,-0.5,-0.5,-0.5,0.5,0.5,0.5,-0.496078431373,-0.472549019608,0.5,0.480392156863,0.496078431373,0.5,0.5,0.492156862745,0.5,0.5,0.5,0.5,0.5,0.492156862745,0.472549019608,0.488235294118,0.5,0.5,0.5,0.5,-0.496078431373,-0.476470588235,-0.492156862745,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,-0.476470588235,-0.48431372549,-0.488235294118,-0.480392156863,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,-0.480392156863,0.5,-0.488235294118,-0.46862745098,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,-0.46862745098,0.5,0.5,-0.472549019608,-0.5,-0.496078431373,-0.5,-0.5,-0.488235294118,-0.488235294118,-0.460784313725,-0.46862745098,-0.480392156863,-0.480392156863,-0.480392156863,-0.480392156863,-0.480392156863,-0.480392156863,-0.480392156863,-0.480392156863,-0.488235294118,-0.48431372549,-0.48431372549,-0.5};
	
	tensorflow::Tensor input_tensor(tensorflow::DT_DOUBLE, tensorflow::TensorShape({1, 400}));
	auto input_map = input_tensor.tensor<double, 2>();

	for (int i = 0; i < 400; ++i) {
		input_map(0, i) = image[i];

	}

	vector<pair<string, Tensor>> input_tensors({{"input:0", input_tensor}});

	vector<Tensor> output_tensors;
	vector<string> output_names({"output:0"});

	Status s = session->Run(input_tensors, {"output: 0"}, {}, &output_tensors);

	cout << s.ToString();
    cout << s.error_message() <<"\n";
    cout << boolalpha;
    cout << s.ok() << "\n";

	cout << input_tensor.DebugString() << "\n";
	//cout << output_tensors[0].DebugString() << "\n";

}


